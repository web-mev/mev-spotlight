{
    "name": "SPOTlight",
    "description": "SPOTlight is an algorithm developed to deconvolute coarse spatial transcriptomics data into constitutive cell populations using models trained on cell-type marker genes derived from single-cell RNA-seq. The output provides estimates of the cell populations present in each spatially sampled region.",
    "inputs": {
        "raw_counts": {
            "description": "The input raw count matrix. Must be an integer-based table.", 
            "name": "Count matrix:", 
            "required": true, 
            "converter": "api.converters.data_resource.LocalDockerSingleVariableDataResourceConverter",
            "spec": {
                "attribute_type": "VariableDataResource", 
                "resource_types": ["I_MTX", "RNASEQ_COUNT_MTX"], 
                "many": false
            }
        },
        "coords_metadata": {
            "description": "The coordinate metadata. This describes the physical location for each of the sampled points. The first column has the barcode values which should match the columns of the expression matrix. Columns 2 and 3 have the horizontal (x) and vertical (y) positions.", 
            "name": "Coordinate metadata:", 
            "required": true, 
            "converter": "api.converters.data_resource.LocalDockerSingleDataResourceConverter",
            "spec": {
                "attribute_type": "DataResource", 
                "resource_type": "ANN", 
                "many": false
            }
        },  
        "sample_name": {
            "description": "The name of the sample", 
            "name": "Sample name:", 
            "required": true, 
            "converter": "api.converters.basic_attributes.StringConverter",
            "spec": {
                "attribute_type": "String"
            }
        },
        "normalization_method": {
            "description": "We provide log or SCTransform (Seurat) based normalization. For more details on each, see the corresponding publications", 
            "name": "Normalization method:", 
            "required": true, 
            "converter": "api.converters.basic_attributes.StringConverter",
            "spec": {
                "attribute_type": "OptionString",
                "options": ["log","SCTransform"]
            }
        },
        "trained_model": {
            "description": "The trained model for the tissue of interest.", 
            "name": "Tissue model:", 
            "required": true, 
            "converter": "api.converters.basic_attributes.UnrestrictedStringConverter",
            "spec": {
                "attribute_type": "OptionString",
                "options": ["Mouse:Kidney"]
            }
        },
        "gene_id_choice": {
            "description": "The type of identifier for the genes in your counts file. If it's the \"common\" name (like TP53, BCL2), then choose \"Symbol\".", 
            "name": "Gene ID type:", 
            "required": true,
            "converter": "api.converters.basic_attributes.StringConverter", 
            "spec": {
                "attribute_type": "OptionString",
                "options": ["Symbol", "Refseq", "Ensembl"],
                "default": "Symbol"
            }
        },
        "xpos_col": {
            "description": "The column header identifying the x/horizontal position in the coordinate metadata file.", 
            "name": "x-position column:", 
            "required": true, 
            "converter": "api.converters.basic_attributes.StringConverter",
            "spec": {
                "attribute_type": "String"
            }
        },
        "ypos_col": {
            "description": "The column header identifying the y/vertical position in the coordinate metadata file.", 
            "name": "y-position column:", 
            "required": true, 
            "converter": "api.converters.basic_attributes.StringConverter",
            "spec": {
                "attribute_type": "String"
            }
        }
    },
    "outputs": {
        "deconvoluted_output": {
            "required": true,
            "converter": "api.converters.data_resource.LocalDockerSingleDataResourceConverter",
            "spec": {
                "attribute_type": "DataResource",
                "resource_type": "ANN",
                "many": false
            }
        }
    },
    "mode": "local_docker",
    "workspace_operation": true
}
